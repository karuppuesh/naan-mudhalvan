import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler
from xgboost import XGBRegressor, plot_importance

# Load dataset
def load_data(file_path):
    df = pd.read_csv(file_path)
    print("Initial Data Shape:", df.shape)
    return df

# Preprocess data
def preprocess_data(df):
    # Drop or fill missing values
    df = df.dropna()

    # Remove irrelevant columns if any
    if 'Date' in df.columns:
        df['Date'] = pd.to_datetime(df['Date'])
        df['Day'] = df['Date'].dt.day
        df['Month'] = df['Date'].dt.month
        df['Hour'] = df['Date'].dt.hour
        df.drop(['Date'], axis=1, inplace=True)

    # Define target and features
    target = 'AQI'  # Change if your dataset uses another column name
    features = [col for col in df.columns if col != target]

    X = df[features]
    y = df[target]

    # Standardize features
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    return X_scaled, y, scaler, features

# Train XGBoost model
def train_model(X_train, y_train):
    model = XGBRegressor(objective='reg:squarederror', n_estimators=100, learning_rate=0.1)
    model.fit(X_train, y_train)
    return model

# Evaluate model
def evaluate_model(model, X_test, y_test):
    y_pred = model.predict(X_test)
    rmse = np.sqrt(mean_squared_error(y_test, y_pred))
    r2 = r2_score(y_test, y_pred)
    print(f"RMSE: {rmse:.2f}")
    print(f"RÂ² Score: {r2:.2f}")

    # Plot prediction vs actual
    plt.figure(figsize=(10, 5))
    plt.plot(y_test.values, label='Actual')
    plt.plot(y_pred, label='Predicted')
    plt.legend()
    plt.title("Actual vs Predicted Air Quality Index")
    plt.xlabel("Sample")
    plt.ylabel("AQI")
    plt.show()

# Feature importance
def plot_feature_importance(model, feature_names):
    plt.figure(figsize=(10, 6))
    plot_importance(model, importance_type='weight', show_values=False)
    plt.title("Feature Importance")
    plt.show()

# Main pipeline
def main():
    file_path = 'air_quality_data.csv'  # Update with your actual file
    df = load_data(file_path)
    X, y, scaler, features = preprocess_data(df)

    # Split data
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Train and evaluate
    model = train_model(X_train, y_train)
    evaluate_model(model, X_test, y_test)
    plot_feature_importance(model, features)

if _name_ == '_main_':
    main()
